/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface LiquidityHubInterface extends utils.Interface {
  functions: {
    "_fairClaim()": FunctionFragment;
    "addStream(address,address)": FunctionFragment;
    "cliamAmount(address,address)": FunctionFragment;
    "initalize(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_fairClaim"
      | "addStream"
      | "cliamAmount"
      | "initalize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_fairClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStream",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cliamAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initalize",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "_fairClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addStream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliamAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initalize", data: BytesLike): Result;

  events: {
    "AmountClaimed(address,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountClaimed"): EventFragment;
}

export interface AmountClaimedEventObject {
  claimer: string;
  amount: BigNumber;
  xToken: string;
  dToken: string;
}
export type AmountClaimedEvent = TypedEvent<
  [string, BigNumber, string, string],
  AmountClaimedEventObject
>;

export type AmountClaimedEventFilter = TypedEventFilter<AmountClaimedEvent>;

export interface LiquidityHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityHubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _fairClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    addStream(
      xtoken: PromiseOrValue<string>,
      dtoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cliamAmount(
      xToken: PromiseOrValue<string>,
      dToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initalize(
      _streamCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _fairClaim(overrides?: CallOverrides): Promise<BigNumber>;

  addStream(
    xtoken: PromiseOrValue<string>,
    dtoken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cliamAmount(
    xToken: PromiseOrValue<string>,
    dToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initalize(
    _streamCreator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _fairClaim(overrides?: CallOverrides): Promise<BigNumber>;

    addStream(
      xtoken: PromiseOrValue<string>,
      dtoken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cliamAmount(
      xToken: PromiseOrValue<string>,
      dToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initalize(
      _streamCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AmountClaimed(address,uint256,address,address)"(
      claimer?: null,
      amount?: null,
      xToken?: null,
      dToken?: null
    ): AmountClaimedEventFilter;
    AmountClaimed(
      claimer?: null,
      amount?: null,
      xToken?: null,
      dToken?: null
    ): AmountClaimedEventFilter;
  };

  estimateGas: {
    _fairClaim(overrides?: CallOverrides): Promise<BigNumber>;

    addStream(
      xtoken: PromiseOrValue<string>,
      dtoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cliamAmount(
      xToken: PromiseOrValue<string>,
      dToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initalize(
      _streamCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _fairClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addStream(
      xtoken: PromiseOrValue<string>,
      dtoken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cliamAmount(
      xToken: PromiseOrValue<string>,
      dToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initalize(
      _streamCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
