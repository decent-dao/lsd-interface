/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace StreamCreator {
  export type RoundStruct = {
    _pToken: PromiseOrValue<string>;
    _dTokenImpl: PromiseOrValue<string>;
    _xName: PromiseOrValue<string>;
    _xSymbol: PromiseOrValue<string>;
    _dName: PromiseOrValue<string>;
    _dSymbol: PromiseOrValue<string>;
    _streamImpl: PromiseOrValue<string>;
    _investors: PromiseOrValue<string>[];
    _allocations: PromiseOrValue<BigNumberish>[];
    _maturityTime: PromiseOrValue<BigNumberish>;
  };

  export type RoundStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    BigNumber[],
    BigNumber
  ] & {
    _pToken: string;
    _dTokenImpl: string;
    _xName: string;
    _xSymbol: string;
    _dName: string;
    _dSymbol: string;
    _streamImpl: string;
    _investors: string[];
    _allocations: BigNumber[];
    _maturityTime: BigNumber;
  };
}

export interface StreamCreatorInterface extends utils.Interface {
  functions: {
    "CreateRound((address,address,string,string,string,string,address,address[],uint256[],uint256))": FunctionFragment;
    "_createDToken(address,address,address[],uint256[],string,string)": FunctionFragment;
    "_createStream(address,address,address)": FunctionFragment;
    "_createXToken(address,string,string)": FunctionFragment;
    "host()": FunctionFragment;
    "idToRound(uint256,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "liquidityHub()": FunctionFragment;
    "streamToId(address)": FunctionFragment;
    "tokenWrapperFactory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CreateRound"
      | "_createDToken"
      | "_createStream"
      | "_createXToken"
      | "host"
      | "idToRound"
      | "initialize"
      | "liquidityHub"
      | "streamToId"
      | "tokenWrapperFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CreateRound",
    values: [StreamCreator.RoundStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_createDToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_createStream",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_createXToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "idToRound",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityHub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "streamToId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWrapperFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CreateRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_createDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_createStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_createXToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idToRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "streamToId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenWrapperFactory",
    data: BytesLike
  ): Result;

  events: {
    "RoundCreaated(address,address,address,address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoundCreaated"): EventFragment;
}

export interface RoundCreaatedEventObject {
  _pToken: string;
  _xToken: string;
  _dToken: string;
  _investors: string[];
  _allocations: BigNumber[];
}
export type RoundCreaatedEvent = TypedEvent<
  [string, string, string, string[], BigNumber[]],
  RoundCreaatedEventObject
>;

export type RoundCreaatedEventFilter = TypedEventFilter<RoundCreaatedEvent>;

export interface StreamCreator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StreamCreatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CreateRound(
      round: StreamCreator.RoundStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _createDToken(
      _ptoken: PromiseOrValue<string>,
      _dImpl: PromiseOrValue<string>,
      _investors: PromiseOrValue<string>[],
      _allocations: PromiseOrValue<BigNumberish>[],
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _createStream(
      _ptoken: PromiseOrValue<string>,
      _impl: PromiseOrValue<string>,
      _xToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _createXToken(
      _ptoken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    host(overrides?: CallOverrides): Promise<[string]>;

    idToRound(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        startTime: BigNumber;
        maturityTime: BigNumber;
      }
    >;

    initialize(
      _host: PromiseOrValue<string>,
      _tokenWrapperFactory: PromiseOrValue<string>,
      _liquidityHub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidityHub(overrides?: CallOverrides): Promise<[string]>;

    streamToId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenWrapperFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  CreateRound(
    round: StreamCreator.RoundStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _createDToken(
    _ptoken: PromiseOrValue<string>,
    _dImpl: PromiseOrValue<string>,
    _investors: PromiseOrValue<string>[],
    _allocations: PromiseOrValue<BigNumberish>[],
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _createStream(
    _ptoken: PromiseOrValue<string>,
    _impl: PromiseOrValue<string>,
    _xToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _createXToken(
    _ptoken: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  host(overrides?: CallOverrides): Promise<string>;

  idToRound(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      startTime: BigNumber;
      maturityTime: BigNumber;
    }
  >;

  initialize(
    _host: PromiseOrValue<string>,
    _tokenWrapperFactory: PromiseOrValue<string>,
    _liquidityHub: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidityHub(overrides?: CallOverrides): Promise<string>;

  streamToId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenWrapperFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CreateRound(
      round: StreamCreator.RoundStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    _createDToken(
      _ptoken: PromiseOrValue<string>,
      _dImpl: PromiseOrValue<string>,
      _investors: PromiseOrValue<string>[],
      _allocations: PromiseOrValue<BigNumberish>[],
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    _createStream(
      _ptoken: PromiseOrValue<string>,
      _impl: PromiseOrValue<string>,
      _xToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    _createXToken(
      _ptoken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    host(overrides?: CallOverrides): Promise<string>;

    idToRound(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        startTime: BigNumber;
        maturityTime: BigNumber;
      }
    >;

    initialize(
      _host: PromiseOrValue<string>,
      _tokenWrapperFactory: PromiseOrValue<string>,
      _liquidityHub: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityHub(overrides?: CallOverrides): Promise<string>;

    streamToId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWrapperFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RoundCreaated(address,address,address,address[],uint256[])"(
      _pToken?: null,
      _xToken?: null,
      _dToken?: null,
      _investors?: null,
      _allocations?: null
    ): RoundCreaatedEventFilter;
    RoundCreaated(
      _pToken?: null,
      _xToken?: null,
      _dToken?: null,
      _investors?: null,
      _allocations?: null
    ): RoundCreaatedEventFilter;
  };

  estimateGas: {
    CreateRound(
      round: StreamCreator.RoundStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _createDToken(
      _ptoken: PromiseOrValue<string>,
      _dImpl: PromiseOrValue<string>,
      _investors: PromiseOrValue<string>[],
      _allocations: PromiseOrValue<BigNumberish>[],
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _createStream(
      _ptoken: PromiseOrValue<string>,
      _impl: PromiseOrValue<string>,
      _xToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _createXToken(
      _ptoken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    host(overrides?: CallOverrides): Promise<BigNumber>;

    idToRound(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _host: PromiseOrValue<string>,
      _tokenWrapperFactory: PromiseOrValue<string>,
      _liquidityHub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidityHub(overrides?: CallOverrides): Promise<BigNumber>;

    streamToId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenWrapperFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CreateRound(
      round: StreamCreator.RoundStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _createDToken(
      _ptoken: PromiseOrValue<string>,
      _dImpl: PromiseOrValue<string>,
      _investors: PromiseOrValue<string>[],
      _allocations: PromiseOrValue<BigNumberish>[],
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _createStream(
      _ptoken: PromiseOrValue<string>,
      _impl: PromiseOrValue<string>,
      _xToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _createXToken(
      _ptoken: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    host(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    idToRound(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _host: PromiseOrValue<string>,
      _tokenWrapperFactory: PromiseOrValue<string>,
      _liquidityHub: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidityHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    streamToId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenWrapperFactory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
