/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  FullUpgradableSuperTokenProxy,
  FullUpgradableSuperTokenProxyInterface,
} from "../../../../../@superfluid-finance/ethereum-contracts/contracts/superfluid/FullUpgradableSuperTokenProxy";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061023c806100206000396000f3fe6080604052600436106100225760003560e01c80638129fc1c1461003957610031565b366100315761002f61004e565b005b61002f61004e565b34801561004557600080fd5b5061002f610060565b61005e6100596100f9565b61019c565b565b7fb8fcd5719b3ddf8626f3664705a89b7fc476129a58c1aa5eda57c600cc1821a0546001600160a01b038116156100d35760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015260640160405180910390fd5b50337fb8fcd5719b3ddf8626f3664705a89b7fc476129a58c1aa5eda57c600cc1821a055565b7fb8fcd5719b3ddf8626f3664705a89b7fc476129a58c1aa5eda57c600cc1821a0546000906001600160a01b038116610134576101346101c0565b806001600160a01b0316639470a5b26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610172573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019691906101d6565b91505090565b3660008037600080366000845af43d6000803e8080156101bb573d6000f35b3d6000fd5b634e487b7160e01b600052600160045260246000fd5b6000602082840312156101e857600080fd5b81516001600160a01b03811681146101ff57600080fd5b939250505056fea2646970667358221220738733eac8fb43985aa04c1d81dcb3d87cc55667ebbefe2d808b5bbf1a79329764736f6c634300080e0033";

type FullUpgradableSuperTokenProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FullUpgradableSuperTokenProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FullUpgradableSuperTokenProxy__factory extends ContractFactory {
  constructor(...args: FullUpgradableSuperTokenProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FullUpgradableSuperTokenProxy> {
    return super.deploy(
      overrides || {}
    ) as Promise<FullUpgradableSuperTokenProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FullUpgradableSuperTokenProxy {
    return super.attach(address) as FullUpgradableSuperTokenProxy;
  }
  override connect(signer: Signer): FullUpgradableSuperTokenProxy__factory {
    return super.connect(signer) as FullUpgradableSuperTokenProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FullUpgradableSuperTokenProxyInterface {
    return new utils.Interface(_abi) as FullUpgradableSuperTokenProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FullUpgradableSuperTokenProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FullUpgradableSuperTokenProxy;
  }
}
